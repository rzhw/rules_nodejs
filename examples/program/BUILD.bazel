# Copyright 2017 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@build_bazel_rules_nodejs//:defs.bzl", "jasmine_node_test", "nodejs_binary")
load("@build_bazel_rules_nodejs//:internal/typescript_mock.bzl", "mock_typescript_lib")

# Make the jasmine library available at runtime by exposing our node_modules
# directory.
filegroup(
    name = "node_modules",
    srcs = glob([
        "node_modules/**/*.js",
        "node_modules/**/*.d.ts",
        "node_modules/**/*.json"
    ]),
    visibility = ["//visibility:public"],
)

# Mock out the ts_library rule from rules_typescript
# We want to test that TypeScript outputs can be used in nodejs rules, but
# don't want a cyclical dependency between this repository and rules_typescript.
mock_typescript_lib(
    name = "mock_ts_lib",
    srcs = ["decrement.js"],
)

# This binary wraps up our program in a way that can be `bazel run`, and also
# produces a .exe file on Windows.
nodejs_binary(
    name = "bin",
    # The script we'll ask node to run
    # Note: the label given here must exactly match an entry in "data"
    entry_point = "$(location :index.js)",
    # Runtime dependencies, in our case the script is standalone.
    data = [":index.js"],
    # Only needed because we'll typically run this binary from the workspace
    # in the parent directory. The default value for `node_modules` is
    # @//:node_modules, where the leading @ means "the workspace where the user
    # runs the target"
    node_modules = "//:node_modules",
)

# Unit tests for the files in the package.
# Convenient to use with `ibazel test`
jasmine_node_test(
    name = "test",
    # The typical Bazel idiom is for srcs to be the files directly consumed.
    # In the case of a unit test, that's the spec files.
    # See https://docs.bazel.build/versions/master/build-ref.html#types_of_dependencies
    srcs = glob(["*.spec.js"]),
    # The deps is the runtime dependencies. These can point to compiled files
    # such as the TypeScript library we mocked out.
    deps = [":index.js", ":mock_ts_lib"],
    # See comment about node_modules above.
    node_modules = "//:node_modules",
)

# An end-to-end test for the program.
# It's written in Python just because this is convenient and cross-platform.
# See https://docs.bazel.build/versions/master/be/python.html#py_test
py_test(
    name = "bin_test",
    srcs = ["bin_test.py"],
    deps = ["@build_bazel_rules_nodejs//internal:runfiles"],
    data = [":bin"],
)
